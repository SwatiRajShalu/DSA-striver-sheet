//link:https://leetcode.com/problems/isomorphic-strings/description/

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size()!=t.size()) return false;

        unordered_map<char,char> mp; 
        set<char> st;
        int len=s.size();
        for(int i=0;i<len;i++){
            if(mp.find(s[i])!=mp.end()){
                if(t[i]!=mp[s[i]]) return false;
            }else{
                st.insert(t[i]); //checks if different key doesnot map to same value
                mp[s[i]]=t[i];
            }
        }
        
        if(st.size()==mp.size())
        return true;
        else return false;
    }
};

time complexity: o(n) n is the size of string
space complexity: 0(2n) n is the the size of string
