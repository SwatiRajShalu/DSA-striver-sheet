//link:https://leetcode.com/problems/sort-characters-by-frequency/description/

class Solution {
public:
    string frequencySort(string s) {
        unordered_map <char,int> mp;

        for(int i=0;i<s.size();i++){
           mp[s[i]]++; 
        }

        vector<pair<int,char>>vec;
        for (auto it:mp){
            vec.push_back({it.second,it.first});
        } 

        sort(vec.begin(),vec.end(),
        [](pair<int,char> a , pair<int,char> b){
            return a.first>b.first;
        }) ;     

        string str="";
        for(int i=0;i<vec.size();i++){
            while(vec[i].first-- >0){
                str+=vec[i].second;
            }
        }

        return str;
    }
};

time complexity: 0(n) n is the size of the string
space complexity: 0(n)map+0(n)vec
