//link:https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/
//algo: we move farward and check for the smallest element left to the element and then compare the difference and store the maximum difference
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int min_price=prices[0];
       int max_profit=0;
       for(int i=1;i<prices.size();i++){
        min_price=min(min_price,prices[i]);
        max_profit=max(max_profit, prices[i]-min_price);
       } 

       return max_profit;
    }
};

//time complexity: 0(N) n is the size of the array
//space complexity: 0(1) because no extra space is used
