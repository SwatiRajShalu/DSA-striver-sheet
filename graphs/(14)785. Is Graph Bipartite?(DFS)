//link:https://leetcode.com/problems/is-graph-bipartite/description/

class Solution {
    bool dfs(int v,vector<vector<int>>& graph,vector<int> &color){
         //checking for the adjacent nodes
         for(auto it:graph[v]){
            if(color[it]==-1){
                color[it]=!color[v]; //if not colored , then color the adjacent node with color opposite to parent adjacent node---------
                if(dfs(it,graph,color)==false)return false;
            }
            else if(color[it]==color[v]) return false;
         }
         return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int vertex=graph.size();
        vector<int> color(vertex,-1);

        for(int i=0;i<vertex;i++){
            if(color[i]==-1){
                color[i]=0; //color the initial node with color 0----------------
                if(dfs(i,graph,color)==false) return false;
            }
        }
        return true;
    }
};

//time complexity: 0(V+2E)
//Space complexity:0(v) no of vertex
