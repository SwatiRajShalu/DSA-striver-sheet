//LINK:https://leetcode.com/problems/surrounded-regions/description/

#include <vector>
using namespace std;

class Solution {
public:
    int row[4] = {-1, 0, 1, 0};
    int col[4] = {0, 1, 0, -1};

    void dfs(int r, int c, vector<vector<char>>& board, vector<vector<char>>& ans_board) {
        ans_board[r][c] = 'O';
        for (int i = 0; i < 4; i++) {
            int nr = r + row[i];
            int nc = c + col[i];
            if (nr >= 0 && nr < board.size() && nc >= 0 && nc < board[0].size() && board[nr][nc] == 'O' && ans_board[nr][nc] == 'X') {
                dfs(nr, nc, board, ans_board);
            }
        }
    }

    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;

        vector<vector<char>> ans_board(board.size(), vector<char>(board[0].size(), 'X'));

        // First and last columns
        for (int i = 0; i < board.size(); i++) {
            if (board[i][0] == 'O' && ans_board[i][0] == 'X') {
                dfs(i, 0, board, ans_board);
            }
            if (board[i][board[0].size() - 1] == 'O' && ans_board[i][board[0].size() - 1] == 'X') {
                dfs(i, board[0].size() - 1, board, ans_board);
            }
        }

        // First and last rows
        for (int j = 0; j < board[0].size(); j++) {
            if (board[0][j] == 'O' && ans_board[0][j] == 'X') {
                dfs(0, j, board, ans_board);
            }
            if (board[board.size() - 1][j] == 'O' && ans_board[board.size() - 1][j] == 'X') {
                dfs(board.size() - 1, j, board, ans_board);
            }
        }

        board = ans_board;
    }
};

//TIME COMPLEXITY:
every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time. 
Also, we are running loops for boundary elements so it will take O(N) + O(M).

//SPACE COMPLEXITY: 0(NXM)
