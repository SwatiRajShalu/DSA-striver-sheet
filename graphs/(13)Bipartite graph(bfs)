//link: https://leetcode.com/problems/is-graph-bipartite/description/
//bipartite means that graph whose adjacent vertex we can color differently
/* condition for bipartite:
   no cycle
   even no of cycle
*/
class Solution {
public:
    bool bfs(int ele,vector<vector<int>>& graph,vector<int>& color){
        queue<int> q;
        q.push(ele);
        color[ele]=0;//marked initial colour as 0
        while(!q.empty()){
            int node=q.front();
            q.pop();

            for(auto it: graph[node]){
                if(color[it]==-1){
                    q.push(it);
                    color[it]=!color[node];//assign the opposite color of parent(joint node)
                }else{
                    //if color is matching the parent color
                    if(color[it]==color[node]) 
                    return false;
                }
            }
        } 
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int vertex=graph.size();
        //make a vector to store the colours of vertex
        vector<int> color(vertex,-1);

        for(int i=0;i<vertex;i++){ //-----------------this is done to tackle different components
            if(color[i]==-1){
                if(bfs(i,graph,color)==false) return false;
            }
        }
        return true;      
    }
};
