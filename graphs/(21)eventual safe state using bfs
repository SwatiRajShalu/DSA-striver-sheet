//link:https://leetcode.com/problems/find-eventual-safe-states/

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
       int n=graph.size();
       vector<vector<int>> new_graph(n);//reverse the edges -------------------
       for(int i=0;i<n;i++){
        for(int j=0;j<graph[i].size();j++){
            new_graph[graph[i][j]].push_back(i);
        }
       }

       vector<int> indeg(n,0);
       for(int i=0;i<n;i++){
        for(int j=0;j<new_graph[i].size();j++){
            indeg[new_graph[i][j]]++;
        }
       }

       queue<int> q;
       for(int i=0;i<n;i++){
        if(indeg[i]==0) q.push(i);
       } 

       vector<int> ans;
       while(!q.empty()){
        int node=q.front();q.pop();
        ans.push_back(node);
        
        for(auto it:new_graph[node]){
            indeg[it]--;
            if(indeg[it]==0) q.push(it);
        }
       }
       sort(ans.begin(),ans.end());
       return ans;
    }
};
