//link: https://leetcode.com/problems/word-ladder/description/

// use queue to store occured no and then do bfs and then pop out the front word and erase that word from list
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {

        queue<pair<string,int>> q;
        q.push({beginWord,1});
        unordered_set<string> s(wordList.begin(),wordList.end());
        s.erase(beginWord);

        while(!q.empty()){
            string word=q.front().first;
            int seq=q.front().second;
            q.pop();
            if(word==endWord) return seq;

            for(int i=0;i<word.size();i++){
                char original=word[i];
                for(char ch='a' ; ch<='z';ch++){
                    word[i]=ch;
                    //if the word exist in set------------------
                    if(s.find(word)!=s.end()){
                        q.push({word,seq+1});
                        s.erase(word); //need to remove that word from set-------------
                    }
                }
                word[i]=original;
            }            
        }
        return 0;   // if not present then return 0 
    }
};

//time complexity: 0(N*M*26) N is the no of words and M is the length of each word
//space complexity: 0(N) use of queue for storing N words(at max)
