//link: 

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root==NULL) return {};

        queue<TreeNode*> q;
        q.push(root);

        vector<vector<int>> ans;

        while(!q.empty()){
            int len=q.size();

            vector<int> sub_ans;
            for(int i=0;i<len;i++){
                TreeNode* top_node=q.front(); q.pop();
                sub_ans.push_back(top_node->val);
                if(top_node->left) q.push(top_node->left);
                if(top_node->right) q.push(top_node->right);
            }
            ans.push_back(sub_ans); //integrate all the level traversed vector----------------------------------------
        }
        return ans;
    }
};

//time complexity: 0(n) no of nodes are enqued and dequed once
//space complexity: 0(n) at worst all the nodes of the leaves could be stored which consist of n/2 nodes thus space complexity is 0(n)
